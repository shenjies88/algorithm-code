有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。如果你胜，你第1次怎样取子? 
 
Input
输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000，且a<=b。a=b=0退出。
 
Output
输出也有若干行，如果最后你是败者，则为0，反之，输出1，并输出使你胜的你第1次取石子后剩下的两堆石子的数量x,y,x<=y。如果在任意的一堆中取走石子能胜同时在两堆中同时取走相同数量的石子也能胜，先输出取走相同数量的石子的情况.



#include <iostream>
#include <cmath>
using namespace std;
int main()
{
	int a,b,n,m,k;
	double temp;
	temp=(1+sqrt(5.0))/2.0;
	
	while(scanf("%d%d",&a,&b)!=EOF&&(a||b))
	{
		if (a>b)
		{
			a^=b;
			b^=a;
			a^=b;
		}
		k=b-a;
		if (a==int(k*temp))printf("0\n");
		else
		{    printf("1\n");
			for (int i=1;i<=a;i++)
			{
				n=a-i;
				m=b-i;
				if (n==int(k*temp))
				{
					printf("%d %d\n",n,m);
				}
			}
			for (i=b-1;i>=0;i--)
			{
				n=a,m=i;
				if (n>m)
				{
					n^=m;
					m^=n;
					n^=m;
				}
				k=m-n;
				if (n==int(k*temp))
				{
					printf("%d %d\n",n,m);
				}
			}
		}
		
	}
	return 0;
}