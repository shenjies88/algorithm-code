#include <stdio.h>
#include <stdlib.h>

typedef struct
{
	int *data;
	int lenght;
	int hepe_size;
}Dui;

int Parent(int i)
{
	return i/2;
}

int Left(int i)
{
	return 2*i;
}

int Right(int i)
{
	return 2*i+1;
}

void Max_Hepe(Dui *A,int point)//调整
{
	int l,r,largest,temp;
	l=Left(point);
	r=Right(point);
	if (l>A->hepe_size&&r>A->hepe_size)
	{
		return;
	}
	if (l<=A->hepe_size&&A->data[l]>A->data[point])
	{
		largest=l;
	}
	else largest=point;
	if (r<=A->hepe_size&&A->data[r]>A->data[largest])
	{
		largest=r;
	}
	if (largest!=point)
	{
		temp=A->data[point];
		A->data[point]=A->data[largest];
		A->data[largest]=temp;
	}
	else
	{
		return;
	}
	Max_Hepe(A,largest);
}

void Bui_Hepe(Dui *A)//自底向上构建堆
{
	int i;
	for (i=A->hepe_size/2;i>=1;i--)
	{
		Max_Hepe(A,i);
	}
}


void Hepe_Sort(Dui *A)//排序
{
	int i,temp;
	Bui_Hepe(A);
	for (i=A->hepe_size;i>=2;i--)
	{
		temp=A->data[1];
		A->data[1]=A->data[i];
		A->data[i]=temp;
		A->hepe_size-=1;
		Max_Hepe(A,1);
	}
}

void main()
{
	int i;
	int A[9]={0,54,12,99,51,24,34,87,61};
	Dui x;
	x.data=(int*)malloc(9*sizeof(int));
	x.lenght=8;
	x.hepe_size=0;
	for (i=1;i<=x.lenght;i++)
	{
		x.data[i]=A[i];
		x.hepe_size++;
	}
	Hepe_Sort(&x);

	for (i=1;i<=x.lenght;i++)
	{
		printf("%d ",x.data[i]);
	}
}